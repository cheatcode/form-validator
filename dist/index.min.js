!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).hypothesis=t()}(this,(function(){"use strict";const e=require("axios");return class{constructor(e,t={}){e||this._throwFormattedError("A valid API key is required."),this.apiKey=e,this.customerId=t.customerId||null,this.debug=t.debug||!1,this.customers={login:this._loginCustomer.bind(this),logout:this._logoutCustomer.bind(this),create:this._createCustomer.bind(this),update:this._updateCustomer.bind(this),delete:this._deleteCustomer.bind(this)}}_logDebugMessage(e){console.log("( Hypothesis.js )"),console.log(e)}_throwFormattedError(e){throw new Error(`[Hypothesis] ${e} See https://www.notion.so/Hypothesis-js-Reference-3618ad6c2d5d4447a762a8f63f627efa.`)}_request(t,s,r={}){return this.debug&&this._logDebugMessage({method:t,url:`https://api.hypothesis.app/v1${s}`,headers:{"x-api-key":this.apiKey},data:r}),e({method:t,url:`https://api.hypothesis.app/v1${s}`,headers:{"x-api-key":this.apiKey},data:r}).then(e=>e&&e.data&&e.data.data).catch(e=>{if(e&&e.response){const{status:t}=e.response,s=e.response&&e.response.data&&e.response.data&&e.response.data.data&&e.response.data.data.error;console.warn(`[${t}] ${s}`),e.response.data&&console.warn(e.response.data),this.debug&&e.response.data&&e.response.data.data&&(this._logDebugMessage(e.response.data.data.error),this._logDebugMessage(e.response.data.data.validationErrors))}})}track(e,t){if(!e)throw new Error("Must pass a key to track.");const s={key:e};return this.customerId&&(s.customerId=this.customerId),t&&(s.properties=t),this._request("post","/behavior",s)}_loginCustomer(e){if(!e)throw new Error("Must pass a customerId.");return this.customerId=e,this._request("put","/customers/login",{customerId:e})}_logoutCustomer(e){if(!e&&!this.customerId)throw new Error("Must have a customerId to logout.");return this._request("put","/customers/logout",{customerId:e||this.customerId},()=>{this.customerId=null})}_createCustomer(e){if(!e)throw new Error("Must pass a customer.");return this._request("post","/customers",{...e})}_updateCustomer(e,t){if(!e)throw new Error("Must pass a customerId.");if(!t)throw new Error("Must pass an update for the customer.");return this._request("put",`/customers/${e}`,{...t})}_deleteCustomer(e){if(!e)throw new Error("Must pass a customerId.");return this._request("delete",`/customers/${e}`)}}}));
